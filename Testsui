// src/index.js
// Main entry point for the library
export * from './components';
export { default as plugin } from './plugin';

// src/components/index.js
// Export all components
export { default as Button } from './Button';
export { default as Card } from './Card';
export { default as Input } from './Input';
export { default as Alert } from './Alert';
export { default as Badge } from './Badge';
export { default as Avatar } from './Avatar';

// src/components/Button.jsx
import React from 'react';

const Button = ({ 
  children, 
  variant = 'primary', 
  size = 'md', 
  rounded = false, 
  className = '', 
  ...props 
}) => {
  const baseClasses = 'font-medium focus:outline-none focus:ring-2 focus:ring-offset-2 inline-flex items-center justify-center';
  
  const variantClasses = {
    primary: 'bg-blue-600 hover:bg-blue-700 text-white focus:ring-blue-500',
    secondary: 'bg-gray-200 hover:bg-gray-300 text-gray-800 focus:ring-gray-500',
    success: 'bg-green-600 hover:bg-green-700 text-white focus:ring-green-500',
    danger: 'bg-red-600 hover:bg-red-700 text-white focus:ring-red-500',
    warning: 'bg-yellow-500 hover:bg-yellow-600 text-white focus:ring-yellow-500',
    info: 'bg-blue-400 hover:bg-blue-500 text-white focus:ring-blue-400',
  };
  
  const sizeClasses = {
    sm: 'py-1 px-3 text-sm',
    md: 'py-2 px-4 text-base',
    lg: 'py-3 px-6 text-lg',
  };
  
  const roundedClasses = rounded ? 'rounded-full' : 'rounded-md';
  
  return (
    <button
      className={`${baseClasses} ${variantClasses[variant] || ''} ${sizeClasses[size] || ''} ${roundedClasses} ${className}`}
      {...props}
    >
      {children}
    </button>
  );
};

export default Button;

// src/components/Card.jsx
import React from 'react';

const Card = ({ 
  children, 
  className = '', 
  shadow = 'md',
  padding = 'md',
  border = false,
  ...props 
}) => {
  const shadowClasses = {
    none: '',
    sm: 'shadow-sm',
    md: 'shadow',
    lg: 'shadow-lg',
    xl: 'shadow-xl',
  };

  const paddingClasses = {
    none: 'p-0',
    sm: 'p-2',
    md: 'p-4',
    lg: 'p-6',
    xl: 'p-8',
  };

  const borderClass = border ? 'border border-gray-200' : '';
  
  return (
    <div 
      className={`bg-white rounded-lg ${shadowClasses[shadow]} ${paddingClasses[padding]} ${borderClass} ${className}`}
      {...props}
    >
      {children}
    </div>
  );
};

export default Card;

// src/components/Input.jsx
import React from 'react';

const Input = ({ 
  className = '', 
  size = 'md',
  error = false,
  success = false, 
  ...props 
}) => {
  const baseClasses = 'block w-full border-gray-300 rounded-md shadow-sm focus:ring-2 focus:outline-none';
  
  const sizeClasses = {
    sm: 'py-1 px-2 text-sm',
    md: 'py-2 px-3 text-base',
    lg: 'py-3 px-4 text-lg',
  };

  let statusClasses = 'focus:border-blue-500 focus:ring-blue-500';
  
  if (error) {
    statusClasses = 'border-red-500 focus:border-red-500 focus:ring-red-500';
  } else if (success) {
    statusClasses = 'border-green-500 focus:border-green-500 focus:ring-green-500';
  }
  
  return (
    <input
      className={`${baseClasses} ${sizeClasses[size]} ${statusClasses} ${className}`}
      {...props}
    />
  );
};

export default Input;

// src/components/Alert.jsx
import React from 'react';

const Alert = ({ 
  children, 
  variant = 'info', 
  className = '',
  dismissible = false,
  onDismiss,
  ...props 
}) => {
  const variantClasses = {
    info: 'bg-blue-50 text-blue-800 border-blue-200',
    success: 'bg-green-50 text-green-800 border-green-200',
    warning: 'bg-yellow-50 text-yellow-800 border-yellow-200',
    danger: 'bg-red-50 text-red-800 border-red-200',
  };
  
  return (
    <div 
      className={`p-4 border-l-4 rounded-md ${variantClasses[variant]} ${className}`}
      role="alert"
      {...props}
    >
      <div className="flex items-start">
        <div className="flex-grow">{children}</div>
        {dismissible && (
          <button 
            type="button" 
            className="ml-3 text-gray-400 hover:text-gray-600"
            onClick={onDismiss}
            aria-label="Dismiss"
          >
            <svg className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
              <path fillRule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clipRule="evenodd" />
            </svg>
          </button>
        )}
      </div>
    </div>
  );
};

export default Alert;

// src/components/Badge.jsx
import React from 'react';

const Badge = ({ 
  children, 
  variant = 'gray', 
  size = 'md',
  rounded = false,
  className = '', 
  ...props 
}) => {
  const variantClasses = {
    gray: 'bg-gray-100 text-gray-800',
    red: 'bg-red-100 text-red-800',
    yellow: 'bg-yellow-100 text-yellow-800',
    green: 'bg-green-100 text-green-800',
    blue: 'bg-blue-100 text-blue-800',
    indigo: 'bg-indigo-100 text-indigo-800',
    purple: 'bg-purple-100 text-purple-800',
    pink: 'bg-pink-100 text-pink-800',
  };

  const sizeClasses = {
    sm: 'px-2 py-0.5 text-xs',
    md: 'px-2.5 py-0.5 text-sm',
    lg: 'px-3 py-1 text-base',
  };

  const roundedClasses = rounded ? 'rounded-full' : 'rounded';
  
  return (
    <span 
      className={`inline-flex items-center font-medium ${variantClasses[variant]} ${sizeClasses[size]} ${roundedClasses} ${className}`}
      {...props}
    >
      {children}
    </span>
  );
};

export default Badge;

// src/components/Avatar.jsx
import React from 'react';

const Avatar = ({ 
  src, 
  alt = '', 
  size = 'md', 
  status = null,
  className = '', 
  ...props 
}) => {
  const sizeClasses = {
    xs: 'h-6 w-6',
    sm: 'h-8 w-8',
    md: 'h-10 w-10',
    lg: 'h-12 w-12',
    xl: 'h-16 w-16',
    '2xl': 'h-20 w-20',
  };

  const statusColors = {
    online: 'bg-green-400',
    offline: 'bg-gray-400',
    busy: 'bg-red-400',
    away: 'bg-yellow-400',
  };

  return (
    <div className="relative inline-block">
      <img
        src={src}
        alt={alt}
        className={`inline-block rounded-full object-cover ${sizeClasses[size]} ${className}`}
        {...props}
      />
      {status && (
        <span className={`absolute bottom-0 right-0 block h-2.5 w-2.5 rounded-full ring-2 ring-white ${statusColors[status]}`} />
      )}
    </div>
  );
};

export default Avatar;

// src/plugin.js
// Tailwind CSS plugin
const plugin = require('tailwindcss/plugin');

// Define custom utility classes
module.exports = plugin(function({ addComponents, theme }) {
  const utilities = {
    // Button styles
    '.btn': {
      display: 'inline-flex',
      alignItems: 'center',
      justifyContent: 'center',
      fontWeight: theme('fontWeight.medium'),
      borderRadius: theme('borderRadius.md'),
      padding: `${theme('spacing.2')} ${theme('spacing.4')}`,
      fontSize: theme('fontSize.base')[0],
      lineHeight: theme('fontSize.base')[1],
      transition: 'all 150ms ease-in-out',
      '&:focus': {
        outline: 'none',
        boxShadow: `0 0 0 3px ${theme('colors.blue.300')}`,
      },
    },
    '.btn-primary': {
      backgroundColor: theme('colors.blue.600'),
      color: theme('colors.white'),
      '&:hover': {
        backgroundColor: theme('colors.blue.700'),
      },
    },
    '.btn-secondary': {
      backgroundColor: theme('colors.gray.200'),
      color: theme('colors.gray.800'),
      '&:hover': {
        backgroundColor: theme('colors.gray.300'),
      },
    },
    '.btn-success': {
      backgroundColor: theme('colors.green.600'),
      color: theme('colors.white'),
      '&:hover': {
        backgroundColor: theme('colors.green.700'),
      },
    },
    '.btn-danger': {
      backgroundColor: theme('colors.red.600'),
      color: theme('colors.white'),
      '&:hover': {
        backgroundColor: theme('colors.red.700'),
      },
    },
    '.btn-sm': {
      padding: `${theme('spacing.1')} ${theme('spacing.3')}`,
      fontSize: theme('fontSize.sm')[0],
      lineHeight: theme('fontSize.sm')[1],
    },
    '.btn-lg': {
      padding: `${theme('spacing.3')} ${theme('spacing.6')}`,
      fontSize: theme('fontSize.lg')[0],
      lineHeight: theme('fontSize.lg')[1],
    },
    
    // Card styles
    '.card': {
      backgroundColor: theme('colors.white'),
      borderRadius: theme('borderRadius.lg'),
      boxShadow: theme('boxShadow.md'),
      padding: theme('spacing.4'),
    },
    
    // Input styles
    '.form-input': {
      display: 'block',
      width: '100%',
      padding: `${theme('spacing.2')} ${theme('spacing.3')}`,
      borderWidth: theme('borderWidth.DEFAULT'),
      borderColor: theme('colors.gray.300'),
      borderRadius: theme('borderRadius.md'),
      backgroundColor: theme('colors.white'),
      '&:focus': {
        outline: 'none',
        borderColor: theme('colors.blue.500'),
        boxShadow: `0 0 0 1px ${theme('colors.blue.500')}`,
      },
    },
    '.form-input-error': {
      borderColor: theme('colors.red.500'),
      '&:focus': {
        borderColor: theme('colors.red.500'),
        boxShadow: `0 0 0 1px ${theme('colors.red.500')}`,
      },
    },
    
    // Alert styles
    '.alert': {
      borderLeftWidth: '4px',
      padding: theme('spacing.4'),
      borderRadius: theme('borderRadius.md'),
    },
    '.alert-info': {
      backgroundColor: theme('colors.blue.50'),
      borderLeftColor: theme('colors.blue.500'),
      color: theme('colors.blue.800'),
    },
    '.alert-success': {
      backgroundColor: theme('colors.green.50'),
      borderLeftColor: theme('colors.green.500'),
      color: theme('colors.green.800'),
    },
    '.alert-warning': {
      backgroundColor: theme('colors.yellow.50'),
      borderLeftColor: theme('colors.yellow.500'),
      color: theme('colors.yellow.800'),
    },
    '.alert-danger': {
      backgroundColor: theme('colors.red.50'),
      borderLeftColor: theme('colors.red.500'),
      color: theme('colors.red.800'),
    },
    
    // Badge styles
    '.badge': {
      display: 'inline-flex',
      alignItems: 'center',
      fontWeight: theme('fontWeight.medium'),
      fontSize: theme('fontSize.sm')[0],
      lineHeight: theme('fontSize.sm')[1],
      padding: `${theme('spacing.0.5')} ${theme('spacing.2')}`,
      borderRadius: theme('borderRadius.DEFAULT'),
    },
    '.badge-gray': {
      backgroundColor: theme('colors.gray.100'),
      color: theme('colors.gray.800'),
    },
    '.badge-red': {
      backgroundColor: theme('colors.red.100'),
      color: theme('colors.red.800'),
    },
    '.badge-green': {
      backgroundColor: theme('colors.green.100'),
      color: theme('colors.green.800'),
    },
    '.badge-blue': {
      backgroundColor: theme('colors.blue.100'),
      color: theme('colors.blue.800'),
    },
  };

  addComponents(utilities);
});

// package.json
/*
{
  "name": "react-tailwind-ui",
  "version": "1.0.0",
  "description": "A React UI library with Tailwind CSS",
  "main": "dist/index.js",
  "module": "dist/index.esm.js",
  "files": [
    "dist"
  ],
  "scripts": {
    "build": "rollup -c",
    "dev": "rollup -c -w",
    "test": "jest",
    "storybook": "start-storybook -p 6006",
    "build-storybook": "build-storybook"
  },
  "peerDependencies": {
    "react": "^17.0.0 || ^18.0.0",
    "react-dom": "^17.0.0 || ^18.0.0",
    "tailwindcss": "^3.0.0"
  },
  "devDependencies": {
    "@babel/core": "^7.18.6",
    "@babel/preset-env": "^7.18.6",
    "@babel/preset-react": "^7.18.6",
    "@rollup/plugin-babel": "^5.3.1",
    "@rollup/plugin-commonjs": "^22.0.1",
    "@rollup/plugin-node-resolve": "^13.3.0",
    "@storybook/addon-actions": "^6.5.9",
    "@storybook/addon-essentials": "^6.5.9",
    "@storybook/addon-links": "^6.5.9",
    "@storybook/react": "^6.5.9",
    "autoprefixer": "^10.4.7",
    "babel-loader": "^8.2.5",
    "jest": "^28.1.3",
    "postcss": "^8.4.14",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "rollup": "^2.77.0",
    "rollup-plugin-peer-deps-external": "^2.2.4",
    "rollup-plugin-postcss": "^4.0.2",
    "tailwindcss": "^3.1.6"
  }
}
*/

// rollup.config.js
/*
import babel from '@rollup/plugin-babel';
import resolve from '@rollup/plugin-node-resolve';
import commonjs from '@rollup/plugin-commonjs';
import peerDepsExternal from 'rollup-plugin-peer-deps-external';
import postcss from 'rollup-plugin-postcss';

export default {
  input: 'src/index.js',
  output: [
    {
      file: 'dist/index.js',
      format: 'cjs',
      sourcemap: true,
    },
    {
      file: 'dist/index.esm.js',
      format: 'esm',
      sourcemap: true,
    },
  ],
  plugins: [
    peerDepsExternal(),
    resolve(),
    commonjs(),
    babel({
      exclude: 'node_modules/**',
      babelHelpers: 'bundled',
    }),
    postcss({
      config: {
        path: './postcss.config.js',
      },
      extensions: ['.css'],
      minimize: true,
      inject: {
        insertAt: 'top',
      },
    }),
  ],
  external: ['react', 'react-dom'],
};
*/

// tailwind.config.js
/*
module.exports = {
  content: ['./src/**/*.{js,jsx}'],
  theme: {
    extend: {},
  },
  plugins: [],
};
*/

// postcss.config.js
/*
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};
*/

// README.md
/*
# React Tailwind UI

A customizable React UI library built with Tailwind CSS.

## Installation

```bash
npm install react-tailwind-ui tailwindcss
# or
yarn add react-tailwind-ui tailwindcss
```

## Usage

### Using Components

```jsx
import { Button, Card, Input } from 'react-tailwind-ui';

function App() {
  return (
    <div>
      <Card>
        <h2>Login</h2>
        <Input placeholder="Email" />
        <Button variant="primary">Sign In</Button>
      </Card>
    </div>
  );
}
```

### Using the Tailwind Plugin

Add the plugin to your `tailwind.config.js`:

```js
// tailwind.config.js
module.exports = {
  content: [
    './src/**/*.{js,jsx,ts,tsx}',
  ],
  theme: {
    extend: {},
  },
  plugins: [
    require('react-tailwind-ui/plugin'),
  ],
};
```

Now you can use the utility classes directly in your HTML:

```jsx
function App() {
  return (
    <div>
      <div className="card">
        <h2>Login</h2>
        <input className="form-input" placeholder="Email" />
        <button className="btn btn-primary">Sign In</button>
      </div>
    </div>
  );
}
```

## Available Components

- Button
- Card
- Input
- Alert
- Badge
- Avatar

## Documentation

For complete documentation and examples, visit our [Storybook](https://your-library-storybook-url.com).

## License

MIT
*/
