function sanitizeHTML(html) {
  if (!html) return '';
  
  // Remove all HTML tags
  const withoutTags = html.replace(/<[^>]*>/g, '');
  
  // Replace newlines with <br /> tags for rendering in React
  const withLineBreaks = withoutTags
    .split(/\r?\n/)
    .map((line, i) => (
      <React.Fragment key={i}>
        {line}
        {i !== withoutTags.split(/\r?\n/).length - 1 && <br />}
      </React.Fragment>
    ));
    
  return withLineBreaks;
}


import React from 'react';
import { render, screen } from '@testing-library/react';
import '@testing-library/jest-dom';
import HTMLSanitizer from './HTMLSanitizer'; // Adjust the import path as needed

// Unit test for the sanitizeHTML function
describe('sanitizeHTML function', () => {
  // Isolate the sanitizeHTML function for unit testing
  const sanitizeHTML = (html) => {
    if (!html) return '';
    
    // Remove all HTML tags
    const withoutTags = html.replace(/<[^>]*>/g, '');
    
    // For testing purposes, we'll convert newlines to a marker we can check for
    // In real usage, this would return React elements with <br> tags
    return withoutTags;
  };

  test('removes all HTML tags', () => {
    const input = '<p>This is <strong>bold</strong> and <em>italic</em> text</p>';
    const expected = 'This is bold and italic text';
    expect(sanitizeHTML(input)).toBe(expected);
  });

  test('handles empty input', () => {
    expect(sanitizeHTML('')).toBe('');
    expect(sanitizeHTML(null)).toBe('');
    expect(sanitizeHTML(undefined)).toBe('');
  });

  test('preserves text content', () => {
    const input = '<div>Hello world</div>';
    expect(sanitizeHTML(input)).toBe('Hello world');
  });

  test('handles nested tags', () => {
    const input = '<div><p>Paragraph <span>with <strong>nested</strong> tags</span></p></div>';
    const expected = 'Paragraph with nested tags';
    expect(sanitizeHTML(input)).toBe(expected);
  });

  test('handles attributes', () => {
    const input = '<a href="https://example.com" class="link">Link text</a>';
    const expected = 'Link text';
    expect(sanitizeHTML(input)).toBe(expected);
  });
});

// Component integration test
describe('HTMLSanitizer component', () => {
  test('renders and sanitizes HTML input', () => {
    render(<HTMLSanitizer />);
    
    // The component should have rendered the sanitized text from its default state
    expect(screen.getByText('This is some', { exact: false })).toBeInTheDocument();
    expect(screen.getByText('HTML', { exact: false })).toBeInTheDocument();
    expect(screen.getByText('With a line break', { exact: false })).toBeInTheDocument();
  });
});

// Snapshot test
describe('HTMLSanitizer component snapshots', () => {
  it('renders correctly', () => {
    const { container } = render(<HTMLSanitizer />);
    expect(container).toMatchSnapshot();
  });
});

// Test for the actual line break preservation functionality
describe('Line break preservation', () => {
  const TestComponent = ({ html }) => {
    // This is a simplified version to test just the line break functionality
    const sanitizeWithLineBreaks = (html) => {
      if (!html) return null;
      
      // Remove all HTML tags
      const withoutTags = html.replace(/<[^>]*>/g, '');
      
      // Split by newlines and create React elements with <br> tags
      return withoutTags
        .split(/\r?\n/)
        .map((line, i, arr) => (
          <React.Fragment key={i}>
            {line}
            {i < arr.length - 1 && <br data-testid={`linebreak-${i}`} />}
          </React.Fragment>
        ));
    };

    return <div data-testid="output">{sanitizeWithLineBreaks(html)}</div>;
  };

  test('preserves line breaks by converting them to <br> elements', () => {
    const input = 'Line 1\nLine 2\nLine 3';
    render(<TestComponent html={input} />);
    
    expect(screen.getByText('Line 1')).toBeInTheDocument();
    expect(screen.getByText('Line 2')).toBeInTheDocument();
    expect(screen.getByText('Line 3')).toBeInTheDocument();
    expect(screen.getByTestId('linebreak-0')).toBeInTheDocument();
    expect(screen.getByTestId('linebreak-1')).toBeInTheDocument();
  });

  test('handles multiple newline types', () => {
    const input = 'Line 1\r\nLine 2\rLine 3';
    render(<TestComponent html={input} />);
    
    expect(screen.getByText('Line 1')).toBeInTheDocument();
    expect(screen.getByText('Line 2')).toBeInTheDocument();
    expect(screen.getByText('Line 3')).toBeInTheDocument();
    expect(screen.getByTestId('linebreak-0')).toBeInTheDocument();
    expect(screen.getByTestId('linebreak-1')).toBeInTheDocument();
  });

  test('handles HTML tags and line breaks together', () => {
    const input = '<p>Line 1</p>\n<div>Line 2</div>\n<span>Line 3</span>';
    render(<TestComponent html={input} />);
    
    expect(screen.getByText('Line 1')).toBeInTheDocument();
    expect(screen.getByText('Line 2')).toBeInTheDocument();
    expect(screen.getByText('Line 3')).toBeInTheDocument();
    expect(screen.getByTestId('linebreak-0')).toBeInTheDocument();
    expect(screen.getByTestId('linebreak-1')).toBeInTheDocument();
  });
});
